class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def solveSudoku(board):
    

            empty_cell = findEmptyCell(board)



            # If no empty cell found, puzzle is solved

            if not empty_cell:

                return True

            else:

                row = empty_cell[0]

                col = empty_cell[1]



            # Try numbers from 1 to 9

            for num in range(1, 10):

                if isValidMove(board, row, col, str(num)):

                    # If the number is valid, try placing it in the cell

                    board[row][col] = str(num)



                    # Recursively solve the rest of the puzzle

                    if solveSudoku(board):

                        return True



                    # If placing the number didn't lead to a solution, backtrack

                    board[row][col] = "."



            # If no number fits, return False to backtrack

            return False



        def findEmptyCell(board):

            # Find the first empty cell (represented by '.')

            for i in range(9):

                for j in range(9):

                    if board[i][j] == ".":

                        return (i, j)

            return None

 

        def isValidMove(board, row, col, num):

            # Check if the number is not already in the same row

            if num in board[row]:

                return False



            # Check if the number is not already in the same column

            for i in range(9):

                if board[i][col] == num:

                    return False



            # Check if the number is not already in the same 3x3 subgrid

            start_row, start_col = 3 * (row // 3), 3 * (col // 3)

            for i in range(start_row, start_row + 3):

                for j in range(start_col, start_col + 3):

                    if board[i][j] == num:

                        return False



            return True



        def printBoard(board):

            for row in board:

                print(" ".join(row))


        if solveSudoku(board):

            print("Solution:")

            printBoard(board)

        else:

            print("No solution exists.")
